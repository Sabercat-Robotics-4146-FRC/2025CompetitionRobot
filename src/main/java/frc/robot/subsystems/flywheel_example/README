This directory contains an example generic flywheel subsystem, as distributed
with AdvantageKit.  The structure of the subsystem directory is:

    * Flywheel.java
        The base subsystem definitions and outward-facing (public) hardware-
        agnostic functions for interacting with the subsystem.  The idea is
        that any of the hardware-specific (i.e. motor controller API calls)
        functionality is insulated from the rest of the robot code within
        the library-specific modules in this directory.
    
    * FlywheelIO.java
        The base subsystem I/O (input/output) interface that contains the
        structure and class variables needed by the library-specific modules.
    
    * FlywheelIOSim.java
        Simulated flywheel module, for use with robot simulations, does not
        control actual hardware.

    * FlywheelIOSparkMax.java
        An example implementation of a flywheel using Rev SparkMax motor
        controllers (and their associated library APIs).
                    
    * FlywheelIOTalonFX.java
        An example implementation of a flywheel using CTRE TalonFX motor
        controllers (and their associated library APIs).

--------------------
When creating a new mechanism subsystem, consider using this generic framework
for public vs. private functions and API calls to make your code more modular
and reusable from year to year.  Additionally, the I/O framework given here
interfaces with AdvantageKit's logging to allow for replay of inputs and
testing of code changes in simulation.
                    